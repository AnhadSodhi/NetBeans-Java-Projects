/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SpellCheck.java
 *
 * Created on 1-Dec-2016, 7:06:44 PM
 */

package spellchecker;
import java.util.Scanner;
import javax.swing.ButtonGroup;

/**
 *
 * @author Cam
 */
public class SpellCheck extends javax.swing.JFrame {

    private Dictionary words_;
    /** Creates new form SpellCheck */
    public SpellCheck() {
        initComponents();
        words_ = new Dictionary();

        ButtonGroup searchType = new ButtonGroup();
        searchType.add(linearBtn);
        searchType.add(binaryBtn);
    }

    //ADD YOUR CODE TO PROPERLY SEARCH THE DICTIONARY, in this case words_ a List<String>
    public boolean linearCheck(String test)
    {
        for(int n = 0; n < words_.size(); n++)
        {
            String guess = words_.get(n);
            if(guess.compareTo(test) == 0)
            {
                return true;
            }
        }
        return false;
    }

    public boolean binaryCheckButRecursion(int min, int max, String test) //I was bored
    {
        int guessIndex = (min+max)/2;
        String guess = words_.get(guessIndex);
        
        if(guess.compareTo(test ) == 0)
        {
            return true;
        }
        else if(min >= max)
        {
            return false;
        }
        else if(guess.compareTo(test ) > 0)
        {
            return binaryCheckButRecursion(min, guessIndex-1, test);
        }
        else
        {
            return binaryCheckButRecursion(guessIndex+1, max, test);
        }
    }
    
    public boolean binaryCheckButNotRecursion(int min, int max, String test)
    {
        while(min <= max)
        {
            int guessIndex = (min+max)/2;
            String guess = words_.get(guessIndex);
            
            if(guess.compareTo(test ) == 0)
            {
                return true;
            }
            else if(guess.compareTo(test ) > 0)
            {
                max = guessIndex-1;
            }
            else
            {
                min = guessIndex+1;
            }
        }
        return false;
    }
    
    //ADD YOUR CODE TO PROPERLY SEARCH THE DICTIONARY, in this case words_ a List<String>
    public boolean binaryCheck(String test)
    {
        int min = 1;
        int max = words_.size();
        
        return binaryCheckButRecursion(min, max, test); 
        //Type binaryCheckButNotRecursion for the non-recursive answer
        //Same parameters
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        wordsTxt = new javax.swing.JTextArea();
        binaryBtn = new javax.swing.JRadioButton();
        linearBtn = new javax.swing.JRadioButton();
        spellCheckBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        errorsTxt = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        timeTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        accessesTxt = new javax.swing.JTextField();
        clearBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        wordsTxt.setColumns(20);
        wordsTxt.setRows(5);
        jScrollPane1.setViewportView(wordsTxt);

        binaryBtn.setText("Binary Search");

        linearBtn.setText("Linear Search");

        spellCheckBtn.setText("Spell Check!");
        spellCheckBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spellCheckBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Enter your text below:");

        errorsTxt.setColumns(20);
        errorsTxt.setRows(5);
        jScrollPane2.setViewportView(errorsTxt);

        jLabel2.setText("Unrecognized words:");

        jLabel3.setText("Elapsed Time:");

        timeTxt.setEditable(false);

        jLabel4.setText("Accesses:");

        accessesTxt.setEditable(false);

        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(linearBtn)
                        .addGap(18, 18, 18)
                        .addComponent(binaryBtn)
                        .addGap(18, 18, 18)
                        .addComponent(spellCheckBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(65, 65, 65))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(timeTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                                .addComponent(accessesTxt))))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(binaryBtn)
                    .addComponent(linearBtn)
                    .addComponent(jLabel1)
                    .addComponent(accessesTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(spellCheckBtn)
                    .addComponent(clearBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(timeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void spellCheckBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spellCheckBtnActionPerformed
        // TODO add your handling code here:
        if(linearBtn.isSelected())
            linearSpellCheck();
        else if(binaryBtn.isSelected())
            binarySpellCheck();
    }//GEN-LAST:event_spellCheckBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        // TODO add your handling code here:
        words_.resetCount();
        wordsTxt.setText("");
        errorsTxt.setText("");
        timeTxt.setText("");
        accessesTxt.setText("");
    }//GEN-LAST:event_clearBtnActionPerformed

    public void linearSpellCheck()
    {
        words_.resetCount();
        long now = System.currentTimeMillis();
        String testValues = wordsTxt.getText();
        Scanner scan = new Scanner( testValues );
        while(scan.hasNext())
        {
            String next = scan.next().replace("[\"\\.',\\+-\\(\\)]", "").toLowerCase();
            if(!linearCheck(next))
                errorsTxt.setText( errorsTxt.getText() + next + "\n");
        }
        long after = System.currentTimeMillis();
        timeTxt.setText( (after - now) + "ms" );
        accessesTxt.setText(words_.accesses() + "");
    }

    public void binarySpellCheck()
    {
        words_.resetCount();
        long now = System.currentTimeMillis();
        String testValues = wordsTxt.getText();
        Scanner scan = new Scanner( testValues );
        while(scan.hasNext())
        {
            String next = scan.next().replace("[\"\\.',\\+-\\(\\)]", "").toLowerCase();
            if(!binaryCheck(next))
                errorsTxt.setText( errorsTxt.getText() + next + "\n");
        }
        long after = System.currentTimeMillis();
        timeTxt.setText( (after - now) + "ms" );
        accessesTxt.setText(words_.accesses() + "");
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SpellCheck().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField accessesTxt;
    private javax.swing.JRadioButton binaryBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JTextArea errorsTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton linearBtn;
    private javax.swing.JButton spellCheckBtn;
    private javax.swing.JTextField timeTxt;
    private javax.swing.JTextArea wordsTxt;
    // End of variables declaration//GEN-END:variables

}
